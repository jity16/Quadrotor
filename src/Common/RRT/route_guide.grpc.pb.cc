// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: route_guide.proto

#include "route_guide.pb.h"
#include "route_guide.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace routeguide {

static const char* RouteGuide_method_names[] = {
  "/routeguide.RouteGuide/AddObstacles",
  "/routeguide.RouteGuide/GetRrtRoute",
};

std::unique_ptr< RouteGuide::Stub> RouteGuide::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RouteGuide::Stub> stub(new RouteGuide::Stub(channel));
  return stub;
}

RouteGuide::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_AddObstacles_(RouteGuide_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRrtRoute_(RouteGuide_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RouteGuide::Stub::AddObstacles(::grpc::ClientContext* context, const ::routeguide::Points& request, ::routeguide::Obstacles* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddObstacles_, context, request, response);
}

void RouteGuide::Stub::experimental_async::AddObstacles(::grpc::ClientContext* context, const ::routeguide::Points* request, ::routeguide::Obstacles* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddObstacles_, context, request, response, std::move(f));
}

void RouteGuide::Stub::experimental_async::AddObstacles(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routeguide::Obstacles* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddObstacles_, context, request, response, std::move(f));
}

void RouteGuide::Stub::experimental_async::AddObstacles(::grpc::ClientContext* context, const ::routeguide::Points* request, ::routeguide::Obstacles* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddObstacles_, context, request, response, reactor);
}

void RouteGuide::Stub::experimental_async::AddObstacles(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routeguide::Obstacles* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddObstacles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::routeguide::Obstacles>* RouteGuide::Stub::AsyncAddObstaclesRaw(::grpc::ClientContext* context, const ::routeguide::Points& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::routeguide::Obstacles>::Create(channel_.get(), cq, rpcmethod_AddObstacles_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::routeguide::Obstacles>* RouteGuide::Stub::PrepareAsyncAddObstaclesRaw(::grpc::ClientContext* context, const ::routeguide::Points& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::routeguide::Obstacles>::Create(channel_.get(), cq, rpcmethod_AddObstacles_, context, request, false);
}

::grpc::Status RouteGuide::Stub::GetRrtRoute(::grpc::ClientContext* context, const ::routeguide::Points& request, ::routeguide::Points* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRrtRoute_, context, request, response);
}

void RouteGuide::Stub::experimental_async::GetRrtRoute(::grpc::ClientContext* context, const ::routeguide::Points* request, ::routeguide::Points* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRrtRoute_, context, request, response, std::move(f));
}

void RouteGuide::Stub::experimental_async::GetRrtRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routeguide::Points* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRrtRoute_, context, request, response, std::move(f));
}

void RouteGuide::Stub::experimental_async::GetRrtRoute(::grpc::ClientContext* context, const ::routeguide::Points* request, ::routeguide::Points* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRrtRoute_, context, request, response, reactor);
}

void RouteGuide::Stub::experimental_async::GetRrtRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routeguide::Points* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRrtRoute_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::routeguide::Points>* RouteGuide::Stub::AsyncGetRrtRouteRaw(::grpc::ClientContext* context, const ::routeguide::Points& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::routeguide::Points>::Create(channel_.get(), cq, rpcmethod_GetRrtRoute_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::routeguide::Points>* RouteGuide::Stub::PrepareAsyncGetRrtRouteRaw(::grpc::ClientContext* context, const ::routeguide::Points& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::routeguide::Points>::Create(channel_.get(), cq, rpcmethod_GetRrtRoute_, context, request, false);
}

RouteGuide::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RouteGuide_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RouteGuide::Service, ::routeguide::Points, ::routeguide::Obstacles>(
          std::mem_fn(&RouteGuide::Service::AddObstacles), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RouteGuide_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RouteGuide::Service, ::routeguide::Points, ::routeguide::Points>(
          std::mem_fn(&RouteGuide::Service::GetRrtRoute), this)));
}

RouteGuide::Service::~Service() {
}

::grpc::Status RouteGuide::Service::AddObstacles(::grpc::ServerContext* context, const ::routeguide::Points* request, ::routeguide::Obstacles* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RouteGuide::Service::GetRrtRoute(::grpc::ServerContext* context, const ::routeguide::Points* request, ::routeguide::Points* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace routeguide

