// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: route_guide.proto
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_route_5fguide_2eproto__INCLUDED
#define GRPC_route_5fguide_2eproto__INCLUDED

#include "route_guide.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace routeguide {

// Interface exported by the server.
class RouteGuide final {
 public:
  static constexpr char const* service_full_name() {
    return "routeguide.RouteGuide";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // A simple RPC.
    //
    // Obtains the feature at a given position.
    //
    // A feature with an empty name is returned if there's no feature at the given
    // position.
    virtual ::grpc::Status AddObstacles(::grpc::ClientContext* context, const ::routeguide::Points& request, ::routeguide::Obstacles* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::Obstacles>> AsyncAddObstacles(::grpc::ClientContext* context, const ::routeguide::Points& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::Obstacles>>(AsyncAddObstaclesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::Obstacles>> PrepareAsyncAddObstacles(::grpc::ClientContext* context, const ::routeguide::Points& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::Obstacles>>(PrepareAsyncAddObstaclesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRrtRoute(::grpc::ClientContext* context, const ::routeguide::Points& request, ::routeguide::Points* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::Points>> AsyncGetRrtRoute(::grpc::ClientContext* context, const ::routeguide::Points& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::Points>>(AsyncGetRrtRouteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::Points>> PrepareAsyncGetRrtRoute(::grpc::ClientContext* context, const ::routeguide::Points& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::Points>>(PrepareAsyncGetRrtRouteRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // A simple RPC.
      //
      // Obtains the feature at a given position.
      //
      // A feature with an empty name is returned if there's no feature at the given
      // position.
      virtual void AddObstacles(::grpc::ClientContext* context, const ::routeguide::Points* request, ::routeguide::Obstacles* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddObstacles(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routeguide::Obstacles* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddObstacles(::grpc::ClientContext* context, const ::routeguide::Points* request, ::routeguide::Obstacles* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void AddObstacles(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routeguide::Obstacles* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetRrtRoute(::grpc::ClientContext* context, const ::routeguide::Points* request, ::routeguide::Points* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRrtRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routeguide::Points* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRrtRoute(::grpc::ClientContext* context, const ::routeguide::Points* request, ::routeguide::Points* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetRrtRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routeguide::Points* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::Obstacles>* AsyncAddObstaclesRaw(::grpc::ClientContext* context, const ::routeguide::Points& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::Obstacles>* PrepareAsyncAddObstaclesRaw(::grpc::ClientContext* context, const ::routeguide::Points& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::Points>* AsyncGetRrtRouteRaw(::grpc::ClientContext* context, const ::routeguide::Points& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routeguide::Points>* PrepareAsyncGetRrtRouteRaw(::grpc::ClientContext* context, const ::routeguide::Points& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status AddObstacles(::grpc::ClientContext* context, const ::routeguide::Points& request, ::routeguide::Obstacles* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::Obstacles>> AsyncAddObstacles(::grpc::ClientContext* context, const ::routeguide::Points& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::Obstacles>>(AsyncAddObstaclesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::Obstacles>> PrepareAsyncAddObstacles(::grpc::ClientContext* context, const ::routeguide::Points& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::Obstacles>>(PrepareAsyncAddObstaclesRaw(context, request, cq));
    }
    ::grpc::Status GetRrtRoute(::grpc::ClientContext* context, const ::routeguide::Points& request, ::routeguide::Points* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::Points>> AsyncGetRrtRoute(::grpc::ClientContext* context, const ::routeguide::Points& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::Points>>(AsyncGetRrtRouteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::Points>> PrepareAsyncGetRrtRoute(::grpc::ClientContext* context, const ::routeguide::Points& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routeguide::Points>>(PrepareAsyncGetRrtRouteRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void AddObstacles(::grpc::ClientContext* context, const ::routeguide::Points* request, ::routeguide::Obstacles* response, std::function<void(::grpc::Status)>) override;
      void AddObstacles(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routeguide::Obstacles* response, std::function<void(::grpc::Status)>) override;
      void AddObstacles(::grpc::ClientContext* context, const ::routeguide::Points* request, ::routeguide::Obstacles* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void AddObstacles(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routeguide::Obstacles* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetRrtRoute(::grpc::ClientContext* context, const ::routeguide::Points* request, ::routeguide::Points* response, std::function<void(::grpc::Status)>) override;
      void GetRrtRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routeguide::Points* response, std::function<void(::grpc::Status)>) override;
      void GetRrtRoute(::grpc::ClientContext* context, const ::routeguide::Points* request, ::routeguide::Points* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetRrtRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routeguide::Points* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::routeguide::Obstacles>* AsyncAddObstaclesRaw(::grpc::ClientContext* context, const ::routeguide::Points& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routeguide::Obstacles>* PrepareAsyncAddObstaclesRaw(::grpc::ClientContext* context, const ::routeguide::Points& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routeguide::Points>* AsyncGetRrtRouteRaw(::grpc::ClientContext* context, const ::routeguide::Points& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routeguide::Points>* PrepareAsyncGetRrtRouteRaw(::grpc::ClientContext* context, const ::routeguide::Points& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AddObstacles_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRrtRoute_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // A simple RPC.
    //
    // Obtains the feature at a given position.
    //
    // A feature with an empty name is returned if there's no feature at the given
    // position.
    virtual ::grpc::Status AddObstacles(::grpc::ServerContext* context, const ::routeguide::Points* request, ::routeguide::Obstacles* response);
    virtual ::grpc::Status GetRrtRoute(::grpc::ServerContext* context, const ::routeguide::Points* request, ::routeguide::Points* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AddObstacles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddObstacles() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AddObstacles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddObstacles(::grpc::ServerContext* context, const ::routeguide::Points* request, ::routeguide::Obstacles* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddObstacles(::grpc::ServerContext* context, ::routeguide::Points* request, ::grpc::ServerAsyncResponseWriter< ::routeguide::Obstacles>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRrtRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetRrtRoute() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetRrtRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRrtRoute(::grpc::ServerContext* context, const ::routeguide::Points* request, ::routeguide::Points* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRrtRoute(::grpc::ServerContext* context, ::routeguide::Points* request, ::grpc::ServerAsyncResponseWriter< ::routeguide::Points>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AddObstacles<WithAsyncMethod_GetRrtRoute<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddObstacles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_AddObstacles() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::routeguide::Points, ::routeguide::Obstacles>(
          [this](::grpc::ServerContext* context,
                 const ::routeguide::Points* request,
                 ::routeguide::Obstacles* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->AddObstacles(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_AddObstacles(
        ::grpc::experimental::MessageAllocator< ::routeguide::Points, ::routeguide::Obstacles>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::routeguide::Points, ::routeguide::Obstacles>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddObstacles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddObstacles(::grpc::ServerContext* context, const ::routeguide::Points* request, ::routeguide::Obstacles* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AddObstacles(::grpc::ServerContext* context, const ::routeguide::Points* request, ::routeguide::Obstacles* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetRrtRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetRrtRoute() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::routeguide::Points, ::routeguide::Points>(
          [this](::grpc::ServerContext* context,
                 const ::routeguide::Points* request,
                 ::routeguide::Points* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetRrtRoute(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetRrtRoute(
        ::grpc::experimental::MessageAllocator< ::routeguide::Points, ::routeguide::Points>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::routeguide::Points, ::routeguide::Points>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetRrtRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRrtRoute(::grpc::ServerContext* context, const ::routeguide::Points* request, ::routeguide::Points* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetRrtRoute(::grpc::ServerContext* context, const ::routeguide::Points* request, ::routeguide::Points* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_AddObstacles<ExperimentalWithCallbackMethod_GetRrtRoute<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AddObstacles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddObstacles() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AddObstacles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddObstacles(::grpc::ServerContext* context, const ::routeguide::Points* request, ::routeguide::Obstacles* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRrtRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetRrtRoute() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetRrtRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRrtRoute(::grpc::ServerContext* context, const ::routeguide::Points* request, ::routeguide::Points* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddObstacles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AddObstacles() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AddObstacles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddObstacles(::grpc::ServerContext* context, const ::routeguide::Points* request, ::routeguide::Obstacles* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddObstacles(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRrtRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetRrtRoute() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetRrtRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRrtRoute(::grpc::ServerContext* context, const ::routeguide::Points* request, ::routeguide::Points* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRrtRoute(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddObstacles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_AddObstacles() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->AddObstacles(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_AddObstacles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddObstacles(::grpc::ServerContext* context, const ::routeguide::Points* request, ::routeguide::Obstacles* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AddObstacles(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetRrtRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetRrtRoute() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetRrtRoute(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetRrtRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRrtRoute(::grpc::ServerContext* context, const ::routeguide::Points* request, ::routeguide::Points* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetRrtRoute(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddObstacles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddObstacles() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::routeguide::Points, ::routeguide::Obstacles>(std::bind(&WithStreamedUnaryMethod_AddObstacles<BaseClass>::StreamedAddObstacles, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddObstacles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddObstacles(::grpc::ServerContext* context, const ::routeguide::Points* request, ::routeguide::Obstacles* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddObstacles(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::routeguide::Points,::routeguide::Obstacles>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRrtRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetRrtRoute() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::routeguide::Points, ::routeguide::Points>(std::bind(&WithStreamedUnaryMethod_GetRrtRoute<BaseClass>::StreamedGetRrtRoute, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetRrtRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRrtRoute(::grpc::ServerContext* context, const ::routeguide::Points* request, ::routeguide::Points* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRrtRoute(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::routeguide::Points,::routeguide::Points>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AddObstacles<WithStreamedUnaryMethod_GetRrtRoute<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AddObstacles<WithStreamedUnaryMethod_GetRrtRoute<Service > > StreamedService;
};

}  // namespace routeguide


#endif  // GRPC_route_5fguide_2eproto__INCLUDED
